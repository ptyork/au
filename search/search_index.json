{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>au</code> - GitHub Classroom Automation Tools","text":"<p>The gold standard for managing GitHub Classroom assignments at scale. These tools help to automate the workflows required to create, administer, evaluate, and provide feedback for assignments.</p>"},{"location":"#purpose","title":"Purpose","text":"<p>GitHub Classroom, especially when combined with GitHub Codespaces, can transform the way instructors deliver technology-focused assignments, evaluate them, and provide feedback to students. However, there is a huge learning curve for most instructors to be able to use these tools effectively. Likewise, the process can involve a lot of repetitive and error-prone steps, even with basic automation tools.</p> <p>This package contains a number of resources to ease the burden of instructors using GitHub Classroom.</p> <ul> <li><code>au</code> is a commandline tool designed to automate many of the core workflows    involved in creating and evaluating assignments.</li> <li><code>checkit</code> is a separately installable commandline tool for students to use to    test their own assignments against all or a subset of the automated tests    used by the instructor for evaluation. (coming soon)</li> <li><code>au_unit</code> is a separately installable Python module that provides useful    tools to help with the creatinon of unit test for use in student assignment    evaluation. (coming soon)</li> <li>\"Opinionated\" workflow suggestions to help with assignment creation,    automated test creation, semi-automated assignment evaluation, and feedback.    (evolving)</li> <li>Example assignment configurations that can be used to better understand the    above workflows and adapted to meet specific assignment needs.</li> </ul> <p>At present, bespoke tooling is available to support:</p> <ul> <li>Python programming assignments</li> <li>SQL programming assignments with MySQL / MariaDB (coming soon)</li> </ul>"},{"location":"install/","title":"<code>au</code> CLI Installation","text":"<p>The <code>au</code> command line interface (CLI) has the following tool dependencies:</p> <ul> <li>python (&gt;= 3.12)</li> <li>pipx or pip (python package managers)</li> <li>git (Git command line interface)</li> <li>gh (GitHub command line interface)</li> </ul> <p>If you already have these installed and configured, then you can skip directly to the Install <code>au-tools</code> section.</p>"},{"location":"install/#install-dependencies","title":"Install Dependencies","text":"<p>If you don't already have Python version 3.12 or higher installed, then you will need to do so. This process differs significantly between platforms, so will be beyond the scope of this guide.</p> <p>Likewise, Python's <code>pip</code> package installer is required, but its installation can differ significantly between platforms. Just be sure that <code>python --version</code> (substitute <code>python3</code> if appropriate on your platform) and <code>python -m pip --version</code> show a python version of 3.12 or greater.</p>"},{"location":"install/#install-git-and-gh-cli-tools","title":"Install <code>git</code> and <code>gh</code> CLI tools","text":"<p>The <code>au</code> commandline tool makes extensive \"behind the scenes\" use of both the <code>git</code> and <code>gh</code> command line tools. As such, you should insure that these tools are installed in your environment of choice. For example:</p> Windows 11MacOSUbuntu/Debian <p>Using the <code>winget</code> from the terminal: <pre><code>winget install Git.Git\nwinget install GitHub.cli\n</code></pre></p> <p>Using Homebrew from the terminal: <pre><code>brew install git\nbrew install gh\n</code></pre></p> <p>Using <code>apt</code> from the terminal: <pre><code>sudo apt update\nsudo apt install git\nsudo apt install gh\n</code></pre></p>"},{"location":"install/#configure-git","title":"Configure <code>git</code>","text":"<p>If you've never configured the <code>git</code> CLI tool, now is the time. You must minimally identify yourself when committing to a repository, so configure your identity as follows:</p> <pre><code>git config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\n</code></pre> <p>You should verify you configured things correctly by listing your global configuration:</p> <pre><code>git config --list --global\n</code></pre>"},{"location":"install/#authenticate-using-gh","title":"Authenticate using <code>gh</code>","text":"<p>In the past, managing authentication with GitHub using the <code>git</code> CLI was somewhat painful. Fortunately, the GitHub's CLI makes this process mostly transparent now. The process is outlined in detail in the GitHub documentation. However, in short you simply need to do the following.</p> <ol> <li>From the terminal, run:     <pre><code>gh auth login\n</code></pre></li> <li>Select \"GitHub.com\" as the account to login to</li> <li>Choose HTTPS as the preferred protocol</li> <li>Select Y to authenticate Git with your GitHub credentials</li> <li>Choose to \"Login with a web browser\"<ul> <li>copy the one-time code</li> <li>open the browser (note that if a default web browser cannot be opened  you   simply need to open a browser window to   https://github.com/login/device)</li> <li>login to GitHub if needed</li> <li>Paste in your one-time code</li> <li>Click the \"Authorize github\" button   (If using a Passkey you may be required to use it at this point)</li> </ul> </li> <li>The process is now complete, and the gh command in the terminal should now     show you as logged in.</li> </ol> <p>To test your configuration, you can run <code>git clone [PRIVATE_REPO_URL]</code> and ensure that you are not prompted for a user id or password. If not, then you have successfully authenticated both <code>git</code> and <code>gh</code> and you can continue to install and use <code>au</code>.</p>"},{"location":"install/#install-au-tools","title":"Install <code>au-tools</code>","text":"<p>Currently the <code>au</code> CLI is only installable using Python's <code>pip</code> installer or the <code>pipx</code> package manager. <code>pipx</code> automatically uses virtual environments to isolate the <code>au</code> CLI from the rest of your local Python environment, so this is the recommended approach.</p>"},{"location":"install/#installation-via-pipx","title":"Installation via <code>pipx</code>","text":"<p>First you must install <code>pipx</code>. You can consult the full <code>pipx</code> documentation. But in short, you should run something similar to the following to install <code>pipx</code>.</p> Most PlatformsUbuntu (&gt;= 23.04) <p>Assuming <code>pip</code> is installed (substitute <code>pip3</code> if appropriate): <pre><code>pip install pipx\npipx ensurepath\n</code></pre></p> <pre><code>sudo apt update\nsudo apt install pipx\npipx ensurepath\n</code></pre> <p>Once installed, <code>pipx</code> usage is quite similar to most other package managers. To install the <code>au</code> CLI, you can now simply <code>pipx install</code> it in the terminal:</p> <pre><code>pipx install au-tools\n</code></pre>"},{"location":"install/#installation-via-pip-not-recommended","title":"Installation via <code>pip</code> (not recommended)","text":"<p>Though slightly simpler, this method is not recommended as it installs the <code>au</code> CLI and all of its dependencies as global- or user-level Python packages. This tends to \"pollute\" your core Python environment and can cause issues with package interdependency and version conflicts. In fact, the latest releases of most Linux distributions simply disallow installing packages via pip unless you are doing so inside of a virtual environment.</p> <p>However, if you do wish to proceed with this option and/or you have manually configured a Python virtual environment, then simply <code>pip install</code> it from the terminal:</p> <pre><code>pip install au-tools\n</code></pre>"},{"location":"install/#upgrading-au","title":"Upgrading <code>au</code>","text":"<p>Upgrades to the <code>au</code> cli will be published regularly to the PyPI.org repository. Thus, upgrading your installation requires simply telling your package manager to check for and install upgrades.</p> pipxpip <pre><code>pipx upgrade au-tools\n</code></pre> <pre><code>pip install --upgrade au-tools\n</code></pre>"},{"location":"install/#other-recommended-tools","title":"Other Recommended Tools","text":""},{"location":"install/#visidata","title":"VisiData","text":"<p>VisiData is an amazing terminal-based tool for analyzing data. Although total overkill, it's lightning fast to start up and a great way to view CSV files (like course rosters and grades).</p> <p>Install is also quite simple. And I again recommend <code>pipx</code>, though <code>pip</code> works just fine, as well.</p> pipxpip <pre><code>pipx install visidata\n</code></pre> <pre><code>pip install visidata\n</code></pre>"},{"location":"references/","title":"References Overview","text":""},{"location":"references/cli/","title":"<code>au</code> Command Line Reference","text":"<p>This page provides documentation for the <code>au</code> command line tool. This tool should be available on all platforms after installation.</p> <p>Most of the commands assume that you will specify either a <code>ROOT_DIR</code> (most will be the directory into which you will clone or have cloned all student assignment repositories) or a <code>STUDENT_DIR</code> (one student assignment repository). In most cases, if you leave off this argument, the tools assume that you intend to treat the present working directory as the <code>ROOT_DIR</code> or <code>STUDENT_DIR</code>.</p> <p>Note also that to prevent unintentional loss of work, by default the tools will not overwrite any potentially modified directories or files. You will be given the opportunity to force changes, but the default is to be non-destructive. Likewise, prior to potentially long tasks, by default the tool will prompt for confirmation. This too can be overridden if and as needed.</p> <p>The tools are intended primarily to be run interactively and thus will prompt for missing information. However, it is possible to pass all required arguments and options from the command line if batch / unattended operation is desired.</p> <p>The documentation below is identical to that found by running the the specified command with the <code>--help</code> switch.</p>"},{"location":"references/cli/#au-assignment","title":"au assignment","text":"<p>Commands for working with any GitHub Classroom Assignment.</p> <p>Usage:</p> <pre><code>au assignment [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre> <p>Subcommands</p> <ul> <li>accepted: List all students that have accepted an  assignment.</li> <li>clone-all: Clone all student repos for an assignment into ROOT_DIR.</li> <li>commit-all: Commit and push all \"dirty\" student repos in ROOT_DIR.</li> <li>config: Create or change settings for ASSIGNMENT_DIR.</li> <li>info: Display details for an assignment.</li> <li>rename-roster: Rename subdirectories to contain students' real names.</li> <li>time-details: Show submission times for the assignment in ROOT_DIR.</li> </ul>"},{"location":"references/cli/#au-assignment-accepted","title":"au assignment accepted","text":"<p>List all students that have accepted an  assignment.</p> <p>Usage:</p> <pre><code>au assignment accepted [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --assignment-id INTEGER  The integer id for the assignment. If not provided,\n                           will try to read a value stored in settings. Will\n                           prompt for for an assignment interactively if not\n                           provided. An assignment is REQUIRED to run this\n                           command.\n  --roster FILE            A GitHub Classroom roster file, typically named\n                           `classroom_roster.csv`. Will prompt for the file if\n                           not provided.\n  --help                   Show this message and exit.\n</code></pre>"},{"location":"references/cli/#au-assignment-clone-all","title":"au assignment clone-all","text":"<p>Clone all student repos for an assignment into ROOT_DIR.</p> <p>This command will use the specified assignment to query GitHub Classroom for all accepted assignments. For each, it will run the following logic:</p> <pre><code>if repository directory exists in ROOT_DIR\n    if update flag is set\n        pull updates from GitHub\n    else\n        skip\nelse\n    if repository has submissions\n        clone repository into ROOT_DIR\n    else\n        skip\n</code></pre> <p>If no roster is provided, directory names will match the students' GitHub login names. If a GitHub Classroom roster is provided using the --roster option and a student name match can be found in the roster, then the directory will be named as follows:</p> <pre><code>[student_name]@[login_name]\n</code></pre> <p>All commas, spaces, and invalid characters in the student name will be replaced with underscores. for example:</p> <pre><code>York_Paul@ptyork\n</code></pre> <p>If the <code>--preserve-prefix</code> flag is set, then the prefix (also called 'slug') will be added to all assignments, as they are in GitHub. This will insure that all student assignment directory names are unique.</p> <p>If ROOT_DIR is not provided, then the current working directory will be assumed.</p> <p>Usage:</p> <pre><code>au assignment clone-all [OPTIONS] [ROOT_DIR]\n</code></pre> <p>Options:</p> <pre><code>  --assignment-id INTEGER  The integer id for the assignment. If not provided,\n                           will try to read a value stored in settings. Will\n                           prompt for for an assignment interactively if not\n                           provided. An assignment is REQUIRED to run this\n                           command.\n  --roster FILE            A GitHub Classroom roster file, typically named\n                           `classroom_roster.csv`. If not provided, will try\n                           to read a value stored in settings. Will prompt for\n                           the file if not provided.\n  --preserve-prefix        set to preserve the prefix (slug) string common to\n                           all repositories\n  -u, --update             set to pull changes to existing repositories\n  -y, --skip-confirm       set to bypass confirmation and overwrite existing\n                           CSV\n  -p, --preview            set to show changes without actually making them\n  -d, --debug              set to enable detailed output\n  -q, --quiet              set to reduce output to errors only\n  --help                   Show this message and exit.\n</code></pre>"},{"location":"references/cli/#au-assignment-commit-all","title":"au assignment commit-all","text":"<p>Commit and push all \"dirty\" student repos in ROOT_DIR.</p> <p>Iterate over all immediate subdirectories of ROOT_DIR. If it is found to be a Git repository and if it contains changes, then:</p> <pre><code>+ add all changes\n+ commit using --message\n+ push all changes to the remote\n</code></pre> <p>If ROOT_DIR is not provided, then the current working directory will be assumed.</p> <p>If the <code>--message</code> argument is not provided, the script will prompt for one.</p> <p>Usage:</p> <pre><code>au assignment commit-all [OPTIONS] [ROOT_DIR]\n</code></pre> <p>Options:</p> <pre><code>  -m, --message TEXT  the message to apply to all `git commit` calls\n  -p, --preview       set to show changes without actually making them\n  -d, --debug         set to enable detailed output\n  -q, --quiet         set to reduce output to errors only\n  --help              Show this message and exit.\n</code></pre>"},{"location":"references/cli/#au-assignment-config","title":"au assignment config","text":"<p>Create or change settings for ASSIGNMENT_DIR.</p> <p>Most commands that accept configuration parameters such as an assignment-id or roster file will save this to a local configuration file. However, this command is useful if you need to change the settings or if you are pre-configuring an assignment directory prior to cloning student submissions.</p> <p>If not specified, ASSIGNMENT_DIR defaults to the current directory.</p> <p>Usage:</p> <pre><code>au assignment config [OPTIONS] [ASSIGNMENT_DIR]\n</code></pre> <p>Options:</p> <pre><code>  --assignment-id INTEGER  The integer id for the assignment. Will prompt for\n                           for an assignment interactively if not provided. An\n                           assignment is REQUIRED to run this command.\n  --roster FILE            A GitHub Classroom roster file, typically named\n                           `classroom_roster.csv`. Will prompt for the file if\n                           not provided.\n  --help                   Show this message and exit.\n</code></pre>"},{"location":"references/cli/#au-assignment-info","title":"au assignment info","text":"<p>Display details for an assignment.</p> <p>Details include the due date, assignment type, and a count of accepted and submitted assignments, among others.</p> <p>If executed inside of a configured assignment directory, it will display the information for the configured assignment. If not, it will prompt the user to select a classroom and assignment.</p> <p>Usage:</p> <pre><code>au assignment info [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --assignment-id INTEGER  The integer id for the assignment. If not provided,\n                           will try to read a value stored in settings. Will\n                           prompt for for an assignment interactively if not\n                           provided. An assignment is REQUIRED to run this\n                           command.\n  --help                   Show this message and exit.\n</code></pre>"},{"location":"references/cli/#au-assignment-rename-roster","title":"au assignment rename-roster","text":"<p>Rename subdirectories to contain students' real names.</p> <p>This is generally only useful if student repositories have already been cloned using other means. This command uses the same naming logic as does <code>au classroom clone-all</code>.</p> <p>This will rename the subdirectories in ROOT_DIR to contain a students real name by matching a the Github ID from the classroom roster to a folder name. Any potentially unsafe characters, as well as commas and spaces, are replaced with an underscore (<code>_</code>). Any characters after the matching github id are preserved in order to prevent possible duplicate directory names.</p> <p>The purpose is to help with finding and sorting directories by the real names of students.</p> <p>The resulting name will be:</p> <pre><code>[real name]@[github id][suffix]/\n</code></pre> <p>\\For example:</p> <pre><code>York_Paul@ptyork/\n</code></pre> <p>Directories of students that are not in the roster are skipped entirely. If the student's name is found in the directory name, it is likewise skipped as it is assumed that the directory has already been renamed.</p> <p>If ROOT_DIR is not provided, then the current working directory will be assumed.</p> <p>Usage:</p> <pre><code>au assignment rename-roster [OPTIONS] [ROOT_DIR]\n</code></pre> <p>Options:</p> <pre><code>  --roster FILE      A GitHub Classroom roster file, typically named\n                     `classroom_roster.csv`. If not provided, will try to read\n                     a value stored in settings. Will prompt for the file if\n                     not provided. A roster is REQUIRED to run this command.\n  --preserve-prefix  set to preserve the prefix (slug) string common to all\n                     repositories\n  -p, --preview      set to show changes without actually making them\n  -d, --debug        set to enable detailed output\n  -q, --quiet        set to reduce output to errors only\n  --help             Show this message and exit.\n</code></pre>"},{"location":"references/cli/#au-assignment-time-details","title":"au assignment time-details","text":"<p>Show submission times for the assignment in ROOT_DIR.</p> <p>Details include how long the assignment took to complete and how late (if at all) an assignment was.</p> <p>If ROOT_DIR is not provided, then the current working directory will be assumed.</p> <p>Usage:</p> <pre><code>au assignment time-details [OPTIONS] [ROOT_DIR]\n</code></pre> <p>Options:</p> <pre><code>  --assignment-id INTEGER  The integer id for the assignment. If not provided,\n                           will try to read a value stored in settings. Will\n                           prompt for for an assignment interactively if not\n                           provided.\n  --roster FILE            A GitHub Classroom roster file, typically named\n                           `classroom_roster.csv`. If not provided, will try\n                           to read a value stored in settings. Will prompt for\n                           the file if not provided.\n  --late-only              set to only show late students\n  -d, --debug              set to enable detailed output\n  -q, --quiet              set to reduce output to errors only\n  --help                   Show this message and exit.\n</code></pre>"},{"location":"references/cli/#au-python","title":"au python","text":"<p>Commands for working with Python assignments.</p> <p>Usage:</p> <pre><code>au python [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre> <p>Subcommands</p> <ul> <li>eval-assignment: Run automated grading tests on a single student directory.</li> <li>gen-feedback: Generate a feedback file for a single assignment.</li> <li>gen-grades-csv: Generate grades CSV file from feedback files in ROOT_DIR.</li> <li>quick-grade: Run tests and generate feedback for all subdirectories of ROOT_DIR.</li> </ul>"},{"location":"references/cli/#au-python-eval-assignment","title":"au python eval-assignment","text":"<p>Run automated grading tests on a single student directory.</p> <p>Usage:</p> <pre><code>au python eval-assignment [OPTIONS] STUDENT_DIR\n</code></pre> <p>Options:</p> <pre><code>  --assignment-id INTEGER  The integer id for the assignment. If not provided,\n                           will try to read a value stored in settings. Will\n                           prompt for for an assignment interactively if not\n                           provided.\n  --roster FILE            A GitHub Classroom roster file, typically named\n                           `classroom_roster.csv`. If not provided, will try\n                           to read a value stored in settings. Will prompt for\n                           the file if not provided.\n  --student-name TEXT      If no roster is provided, you can provide the name\n                           of the student. If neither is provided, the name\n                           will just be STUDENT_DIR.\n  -d, --debug              set to enable detailed output\n  -q, --quiet              set to reduce output to errors only\n  --help                   Show this message and exit.\n</code></pre>"},{"location":"references/cli/#au-python-gen-feedback","title":"au python gen-feedback","text":"<p>Generate a feedback file for a single assignment.</p> <p>Usage:</p> <pre><code>au python gen-feedback [OPTIONS] STUDENT_DIR\n</code></pre> <p>Options:</p> <pre><code>  --feedback-filename TEXT     name of markdown file to generate\n  -o, --overwrite-feedback     set to override default behavior of not\n                               overwriting feedback files\n  -max, --max-score FLOAT      the maximum score for this assignment\n                               [default: 10]\n  -ptw, --pytest-weight FLOAT  the weight to apply to pytest when calculating\n                               the overall score (0 to 1)  [default: 1.0]\n  -plw, --pylint-weight FLOAT  the weight to apply to pylint when calculating\n                               the overall score (0 to 1)  [default: 0.0]\n  -d, --debug                  set to enable detailed output\n  -q, --quiet                  set to reduce output to errors only\n  --help                       Show this message and exit.\n</code></pre>"},{"location":"references/cli/#au-python-gen-grades-csv","title":"au python gen-grades-csv","text":"<p>Generate grades CSV file from feedback files in ROOT_DIR.</p> <p>Usage:</p> <pre><code>au python gen-grades-csv [OPTIONS] [ROOT_DIR]\n</code></pre> <p>Options:</p> <pre><code>  --feedback-filename TEXT  name of markdown file to generate\n  --grades-filename TEXT    name of CSV file containing student feedback\n  -y, --skip-confirm        set to bypass confirmation and overwrite existing\n                            CSV\n  -d, --debug               set to enable detailed output\n  -q, --quiet               set to reduce output to errors only\n  --help                    Show this message and exit.\n</code></pre>"},{"location":"references/cli/#au-python-quick-grade","title":"au python quick-grade","text":"<p>Run tests and generate feedback for all subdirectories of ROOT_DIR.</p> <p>This is essentially the same as:</p> <pre><code>for SUBDIR in ROOT_DIR\n    au python eval-assignment SUBDIR\n    au python gen-feedback SUBDIR\n</code></pre> <p>If ROOT_DIR is not provided, then the current working directory will be assumed.</p> <p>Usage:</p> <pre><code>au python quick-grade [OPTIONS] [ROOT_DIR]\n</code></pre> <p>Options:</p> <pre><code>  --assignment-id INTEGER      The integer id for the assignment. If not\n                               provided, will try to read a value stored in\n                               settings. Will prompt for for an assignment\n                               interactively if not provided.\n  --roster FILE                A GitHub Classroom roster file, typically named\n                               `classroom_roster.csv`. If not provided, will\n                               try to read a value stored in settings. Will\n                               prompt for the file if not provided.\n  -se, --skip_eval             set to bypass running the evaluations\n  -sf, --skip_feedback         set to bypass generating feedback\n  --feedback-filename TEXT     name of markdown file to generate  [default:\n                               FEEDBACK.md]\n  -o, --overwrite-feedback     set to override default behavior of not\n                               overwriting feedback files\n  -max, --max-score FLOAT      the maximum score for this assignment\n                               [default: 10]\n  -ptw, --pytest-weight FLOAT  the weight to apply to pytest when calculating\n                               the overall score (0 to 1)  [default: 1.0]\n  -plw, --pylint-weight FLOAT  the weight to apply to pylint when calculating\n                               the overall score (0 to 1)  [default: 0.0]\n  -d, --debug                  set to enable detailed output\n  -q, --quiet                  set to reduce output to errors only\n  --help                       Show this message and exit.\n</code></pre>"},{"location":"references/cli/#au-sql","title":"au sql","text":"<p>Commands for working with SQL assignments.</p> <p>Usage:</p> <pre><code>au sql [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre> <p>Subcommands</p> <ul> <li>cat-sql: </li> </ul>"},{"location":"references/cli/#au-sql-cat-sql","title":"au sql cat-sql","text":"<p>Concatenate all text from *.sql files and show them in a pager.</p> <p>Usage:</p> <pre><code>au sql cat-sql [OPTIONS] PATH\n</code></pre> <p>Options:</p> <pre><code>  -pc, --preserve-comments  Disable removal of single-line comments.\n  --help                    Show this message and exit.\n</code></pre>"},{"location":"tips/","title":"Tips &amp; Tricks","text":"<p>Forthcoming</p>"},{"location":"workflows/","title":"Assignment Workflows Overview","text":"<p>These tools and the workflows and best practices described herein are intentionally \"opinionated\". GitHub Classroom is nearly as flexible as Git itself. Many choices must be made in order to leverage it most effectively.</p> <p>Choices involve features of Classroom that simply go unused as well as assumptions and suggestions regarding assignment structure, way they are evaluated, and the way feedback is provided to students.</p> <p>Suggested workflows specific to particular types of assignments are covered on separate pages:</p> <ul> <li>Common Assignment Workflow - processes related to GitHub,     GitHub Classroom, and GitHub Codespaces that are common to all assignments.</li> <li>Python Assignment Workflow - processes specific to Python     programming assignments.</li> <li>SQL Assignment Workflow - processes specific to MySQL /     MariaDB SQL query and database design assignments.</li> </ul>"},{"location":"workflows/#work-locally-philosophy","title":"\"Work Locally\" Philosophy","text":""},{"location":"workflows/#unused-github-classroom-features","title":"Unused GitHub Classroom Features","text":"<p>At this time the following GitHub Classroom features are not recommended:</p> <ul> <li> <p>Feedback Pull Requests:</p> <p>This feature has is simply too confusing for students (and most instructors for that matter) in all but the most advanced technical courses. Since instructors are owners of student repositories, it is easier and less problematic simply to merge and commit feedback directly.</p> </li> <li> <p>Autograding with GitHub Actions</p> <p>This can certainly still be used. However, we've encountered issues that are difficult to diagnose and often impossible to fix. The student feedback is also somewhat confusing for less advanced students and is likewise difficult to customize. Instead we embrace interactive automation for grading and feedback that does not involve GitHub actions.</p> </li> </ul> <p>We do </p>"},{"location":"workflows/common/","title":"Common Workflows","text":"<p>The following processes are common to all assignment types.</p>"},{"location":"workflows/common/#assignment-creation","title":"Assignment Creation","text":""},{"location":"workflows/common/#starter-code","title":"Starter Code","text":""},{"location":"workflows/python/","title":"Python Assignment Workflows","text":""},{"location":"workflows/sql/","title":"SQL Assignment Workflows","text":"<p>Work in progress</p>"}]}